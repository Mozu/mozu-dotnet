
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;


namespace Mozu.Api.Contracts.ProductRuntime
{
		///
		///	Summary list of the product validation in a storefront, including options selected by the shopper.
		///
		public class ProductValidationSummary
		{
			///
			///Properties of a collection of component products that make up a single product bundle with its own product code. Tenants can define product bundles for any product type that supports the Bundle product usage.
			///
			public List<BundledProductSummary> BundledProducts { get; set; }

			public List<Category> Categories { get; set; }

			///
			///List of supported types of fulfillment for the product or variation. The types include direct ship, in-store pickup, or both.
			///
			public List<string> FulfillmentTypesSupported { get; set; }

			///
			///The type of goods in a bundled product. A bundled product is composed of products associated to sell together. Possible values include â€œPhysicalâ€ and â€œDigitalCreditâ€. This comes from the `productType `of the product. Products are defaulted to a Physical `goodsType`. Gift cards have a `goodsType `of DigitalCredit.
			///
			public string GoodsType { get; set; }

			public ProductImage Image { get; set; }

			public ProductInventoryInfo InventoryInfo { get; set; }

			///
			///Indicates if the product must be shipped alone in a container. This is used for products and products within a bundle. If true, this product cannot be shipped in a package with other items and must ship in a package by itself.
			///
			public bool? IsPackagedStandAlone { get; set; }

			public bool IsTaxable { get; set; }

			public PackageMeasurements Measurements { get; set; }

			///
			///The manufacturer's part number for the product.
			///
			public string MfgPartNumber { get; set; }

			public ProductPrice Price { get; set; }

			///
			///Properties that describe the behavior the system uses when determining the price of products.
			///
			public ProductPricingBehaviorInfo PricingBehavior { get; set; }

			public string ProductCode { get; set; }

			public string ProductName { get; set; }

			public string ProductShortDescription { get; set; }

			///
			///A product type is like a product template.
			///
			public string ProductType { get; set; }

			///
			///The usage type that applies to this product, which is Standard (a single product without configurable options), Configurable (a product that includes configurable option attributes), Bundle (a collection of products sold as a single entity), or Component (an invididual product that represents a component in a bundle).
			///
			public string ProductUsage { get; set; }

			public List<ProductProperty> Properties { get; set; }

			public ProductPurchasableState PurchasableState { get; set; }

			///
			///The location where the order item(s) was purchased.
			///
			public string PurchaseLocation { get; set; }

			///
			///The universal product code (UPC) is the barcode defined for the product. The UPC is unique across all sales channels. 
			///
			public string Upc { get; set; }

			public string VariationProductCode { get; set; }

		}

}