
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using Mozu.Api.Contracts.Core;

namespace Mozu.Api.Contracts.ProductAdmin
{
		///
		///	Properties of a product in a master catalog. Product properties include discounts, localizable content, inventory information, attribute configurations, price data, and the catalogs associated with a product.
		///
		public class Product
		{
			///
			///List of discounts available for a product.
			///
			public List<Discount> ApplicableDiscounts { get; set; }

			///
			///Identifier and datetime stamp information recorded when a user or application creates, updates, or deletes a resource entity. This value is system-supplied and read-only.
			///
			public AuditInfo AuditInfo { get; set; }

			///
			///Product code defined by the tenant administrator to use as a base prefix when generating product codes for any variations of this product.
			///
			public string BaseProductCode { get; set; }

			///
			///Properties of a collection of component products that make up a single product bundle with its own product code. Tenants can define product bundles for any product type that supports the Bundle product usage.
			///
			public List<BundledProduct> BundledProducts { get; set; }

			public ProductLocalizedContent Content { get; set; }

			///
			///List of extra product attributes defined for this product.
			///
			public List<ProductExtra> Extras { get; set; }

			///
			///Describes the types of fulfillment that are supported for this product. A product can support direct ship, in-store pickup, or both. Supported fulfillment types are defined at the master catalog level. Client administrators cannot override the supported fulfillment types at the catalog level.
			///
			public List<string> FulfillmentTypesSupported { get; set; }

			///
			///If true, the product has configurable options. This option means that a product is not purchasable until the shopper selects options that resolve into a product variation. Configurable options for a product are the choices a shopper makes when ordering a product. Size and color are configurable options. System-supplied and read-only.
			///
			public bool HasConfigurableOptions { get; set; }

			///
			///If true, this product has standalone options that a shopper can select without configuring a defined product variations. System-supplied and read only.
			///
			public bool HasStandAloneOptions { get; set; }

			///
			///Properties of the inventory levels manages for the product.
			///
			public ProductInventoryInfo InventoryInfo { get; set; }

			///
			///If true, the product must be packaged on its own and should not be jointly packaged with other products.
			///
			public bool? IsPackagedStandAlone { get; set; }

			///
			///If true, the product can be purchased or fulfilled at regular intervals such as a monthly billing cycle or a digital or physical subscription. This property is reserved for future functionality and is system-supplied and read only.
			///
			public bool? IsRecurring { get; set; }

			///
			///If true, the entity is subject to sales tax based on the relevant tax rate.
			///
			public bool? IsTaxable { get; set; }

			///
			///If true, this product is valid for the assigned product type.
			///
			public bool? IsValidForProductType { get; set; }

			///
			///If true, this configured product represents a product variation defined with configurable options. System-supplied and read only.
			///
			public bool IsVariation { get; set; }

			///
			///The unique identifier of the master catalog associated with the entity.
			///
			public int? MasterCatalogId { get; set; }

			///
			///List of option product attributes defined for this product.
			///
			public List<ProductOption> Options { get; set; }

			///
			///Height of the package in imperial units of feet and inches.
			///
			public Measurement PackageHeight { get; set; }

			///
			///Length of the package in imperial units of feet and inches.
			///
			public Measurement PackageLength { get; set; }

			///
			///Weight of the package in imperial units of pounds and ounces.
			///
			public Measurement PackageWeight { get; set; }

			///
			///Width of the package in imperial units of feet and inches.
			///
			public Measurement PackageWidth { get; set; }

			///
			///Unit price that the client intends to sell the product if no sale price is set.
			///
			public ProductPrice Price { get; set; }

			///
			///Describes the behavior the system uses when determining the price of the product.
			///
			public ProductPricingBehaviorInfo PricingBehavior { get; set; }

			///
			///Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.
			///
			public string ProductCode { get; set; }

			///
			///Properties defined for a product as they appear in its associated catalogs.
			///
			public List<ProductInCatalogInfo> ProductInCatalogs { get; set; }

			///
			///Integer that represents the sequential order of the product.
			///
			public int? ProductSequence { get; set; }

			///
			///Unique identifier of the product type assigned for this product. Tenant administrators can only define one product type per product.
			///
			public int? ProductTypeId { get; set; }

			///
			///The usage type that applies to this product, which is Standard (a single product without configurable options), Configurable (a product that includes configurable option attributes), Bundle (a collection of products sold as a single entity), or Component (an invididual product that represents a component in a bundle).
			///
			public string ProductUsage { get; set; }

			///
			///List of property product attributes defined for this product.
			///
			public List<ProductProperty> Properties { get; set; }

			///
			///Properties of the product publishing settings for the associated product.
			///
			public ProductPublishingInfo PublishingInfo { get; set; }

			///
			///The search engine optimized content defined for this product.
			///
			public ProductLocalizedSEOContent SeoContent { get; set; }

			///
			///Identifier of the shipping class.
			///
			public int? ShippingClassId { get; set; }

			///
			///If the product must be packaged separately, the type of standalone package to use.
			///
			public string StandAlonePackageType { get; set; }

			///
			///Supplier-defined properties assigned for the product.
			///
			public ProductSupplierInfo SupplierInfo { get; set; }

			///
			///The universal product code associated with the product. The UPC of a product is unique across all sales channels.
			///
			public string Upc { get; set; }

			///
			///System-generated key that represents the attribute values that uniquely identify a specific product variation.
			///
			public string VariationKey { get; set; }

			///
			///The list of product variation configurations defined for this product based on its available product option attributes.
			///
			public List<ProductVariationOption> VariationOptions { get; set; }

		}

}