
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;

using Mozu.Api.Contracts.CommerceRuntime.Commerce;
using Mozu.Api.Contracts.CommerceRuntime.Discounts;
using Mozu.Api.Contracts.CommerceRuntime.Products;
using Mozu.Api.Contracts.Core;

namespace Mozu.Api.Contracts.CommerceRuntime.Carts
{
		///
		///	Properties of an item added to an active shopping cart.
		///
		public class CartItem
		{
			public decimal? AdjustedLineItemSubtotal { get; set; }

			///
			///Identifier and datetime stamp information recorded when a user or application creates, updates, or deletes a resource entity. This value is system-supplied and read-only.
			///
			public AuditInfo AuditInfo { get; set; }

			public JObject Data { get; set; }

			///
			///The subtotal of the cart item including any applied discount calculations.
			///
			public decimal? DiscountedTotal { get; set; }

			///
			///Estimated amount of discounts applied to the item in the cart, which is system-supplied and read-only.
			///
			public decimal? DiscountTotal { get; set; }

			///
			///Represents the total price of the cart item extended to the shopper. This begins with the Unit Price, then uses any of the following prices if they are defined, in the following order: Override Amount, Sale Amount, List Amount.
			///
			public decimal? ExtendedTotal { get; set; }

			///
			///The total amount of all fees incurred for the item.
			///
			public decimal? FeeTotal { get; set; }

			///
			///The location code associated with the location where this cart item will be fulfilled.
			///
			public string FulfillmentLocationCode { get; set; }

			///
			///The method used to fulfill this cart item, which is direct ship or in-store pickup.
			///
			public string FulfillmentMethod { get; set; }

			public decimal? HandlingAmount { get; set; }

			///
			///Unique identifier of the cart item.
			///
			public string Id { get; set; }

			///
			///If true, the item can be purchased or fulfilled at regular intervals, such as a monthly billing cycle. For example, digital or physical product subscriptions are recurring cart items. This property is not used at this time and is reserved for future functionality.
			///
			public bool? IsRecurring { get; set; }

			///
			///If true, the entity is subject to tax based on the relevant tax rate.
			///
			public bool? IsTaxable { get; set; }

			///
			///The total amount of tax for the item in the cart.
			///
			public decimal? ItemTaxTotal { get; set; }

			public int? LineId { get; set; }

			///
			///Language used for the entity. Currently, only "en-US" is supported.
			///
			public string LocaleCode { get; set; }

			///
			///The properties of the associated product.
			///
			public Product Product { get; set; }

			///
			///Product discounts displays a list of all applicable discount.
			///
			public AppliedLineItemProductDiscount ProductDiscount { get; set; }

			///
			///List of product-level discounts projected to apply to the cart item at checkout.
			///
			public List<AppliedLineItemProductDiscount> ProductDiscounts { get; set; }

			///
			///The specified quantity of the cart item.
			///
			public int Quantity { get; set; }

			public decimal? ShippingAmountBeforeDiscountsAndAdjustments { get; set; }

			///
			///List of shipping discounts projected to apply to the cart item at checkout.
			///
			public List<AppliedLineItemShippingDiscount> ShippingDiscounts { get; set; }

			///
			///The total amount of tax incurred on the shipping charges in the cart.
			///
			public decimal? ShippingTaxTotal { get; set; }

			///
			///The estimated total amount of shipping fees for the item in the cart.
			///
			public decimal? ShippingTotal { get; set; }

			///
			///Estimated amount of the item in the cart without sales tax, shipping costs, and other fees.
			///
			public decimal? Subtotal { get; set; }

			///
			///The amount of the item in the cart that is subject to tax.
			///
			public decimal? TaxableTotal { get; set; }

			public JObject TaxData { get; set; }

			///
			///Estimated total amount of the item, including the product price, sales tax, shipping costs, and other fees.
			///
			public decimal? Total { get; set; }

			public decimal? TotalWithoutWeightedShippingAndHandling { get; set; }

			public decimal? TotalWithWeightedShippingAndHandling { get; set; }

			///
			///Properties of the unit price associated with the cart item.
			///
			public CommerceUnitPrice UnitPrice { get; set; }

			public decimal? WeightedOrderAdjustment { get; set; }

			public decimal? WeightedOrderDiscount { get; set; }

			public decimal? WeightedOrderDuty { get; set; }

			public decimal? WeightedOrderHandlingAdjustment { get; set; }

			public decimal? WeightedOrderHandlingFee { get; set; }

			public decimal? WeightedOrderHandlingFeeDiscount { get; set; }

			public decimal? WeightedOrderHandlingFeeTax { get; set; }

			public decimal? WeightedOrderShipping { get; set; }

			public decimal? WeightedOrderShippingDiscount { get; set; }

			public decimal? WeightedOrderShippingManualAdjustment { get; set; }

			public decimal? WeightedOrderShippingTax { get; set; }

			public decimal? WeightedOrderTax { get; set; }

		}

}