
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;

using Mozu.Api.Contracts.CommerceRuntime.Commerce;
using Mozu.Api.Contracts.CommerceRuntime.Discounts;
using Mozu.Api.Contracts.CommerceRuntime.Fulfillment;
using Mozu.Api.Contracts.CommerceRuntime.Payments;
using Mozu.Api.Contracts.CommerceRuntime.Refunds;
using Mozu.Api.Contracts.Core;

namespace Mozu.Api.Contracts.CommerceRuntime.Orders
{
		///
		///	Properties of an order, including its components.
		///
		public class Order
		{
			///
			///The date and time the order was accepted by the tenant.
			///
			public DateTime? AcceptedDate { get; set; }

			///
			///Indicates if the customer account is opted to receive marketing materials. If true, the customer account is opted in for receiving the content.
			///
			public bool? AcceptsMarketing { get; set; }

			public Adjustment Adjustment { get; set; }

			///
			///The amount of the order the shopper can receive in the event of a return. This amount represents the amount captured at the time the order was submitted, not when the order was returned.
			///
			public decimal AmountAvailableForRefund { get; set; }

			///
			///A counter for how much money has been issued in refunds. This calculated field does NOT include refunds issued in returns.
			///
			public decimal AmountRefunded { get; set; }

			///
			///The total amount of the order not currently associated with a payment. The shopper must create one or more payments to satisfy this amount before the order can be fully paid.
			///
			public decimal AmountRemainingForPayment { get; set; }

			public List<OrderAttribute> Attributes { get; set; }

			public AuditInfo AuditInfo { get; set; }

			public List<string> AvailableActions { get; set; }

			public BillingInfo BillingInfo { get; set; }

			public DateTime? CancelledDate { get; set; }

			public List<ChangeMessage> ChangeMessages { get; set; }

			public string ChannelCode { get; set; }

			public DateTime? ClosedDate { get; set; }

			public List<string> CouponCodes { get; set; }

			public string CurrencyCode { get; set; }

			public int? CustomerAccountId { get; set; }

			public string CustomerInteractionType { get; set; }

			public string CustomerTaxId { get; set; }

			///
			///Custom data for a given vendor set within the commerce process.
			///
			public JObject Data { get; set; }

			///
			///Specifies the fulfillment of digital packages associated with this order.
			///
			public List<DigitalPackage> DigitalPackages { get; set; }

			public decimal? DiscountedSubtotal { get; set; }

			public decimal? DiscountedTotal { get; set; }

			public List<ThresholdMessage> DiscountThresholdMessages { get; set; }

			public decimal? DiscountTotal { get; set; }

			///
			///Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order
			///
			public decimal? DutyAmount { get; set; }

			///
			///Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)
			///
			public decimal? DutyTotal { get; set; }

			public string Email { get; set; }

			public DateTime? ExpirationDate { get; set; }

			///
			///Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
			///
			public List<ExtendedProperty> ExtendedProperties { get; set; }

			///
			///Unique identifier used by an external program to identify a  order, customer account, or wish list.
			///
			public string ExternalId { get; set; }

			public decimal? FeeTotal { get; set; }

			public FulfillmentInfo FulfillmentInfo { get; set; }

			public string FulfillmentStatus { get; set; }

			///
			///The amount to adjust the order handling fee.
			///
			public Adjustment HandlingAdjustment { get; set; }

			public decimal? HandlingAmount { get; set; }

			///
			///The list of historically-applied handling discounts. The active one will have IsExcluded == false
			///
			public List<AppliedDiscount> HandlingDiscounts { get; set; }

			public decimal? HandlingSubTotal { get; set; }

			public decimal? HandlingTaxTotal { get; set; }

			///
			///This total represents the handling amount value with any applied discounts.
			///
			public decimal? HandlingTotal { get; set; }

			public bool? HasDraft { get; set; }

			public string Id { get; set; }

			///
			///The date and time an order or wish list is imported into . This is not the date and time it was created in the external application.
			///
			public DateTime? ImportDate { get; set; }

			///
			///The list of invalid coupons the shopper attempted to enter for the cart or order. These coupons may no longer be valid or incorrectly entered.
			///
			public List<InvalidCoupon> InvalidCoupons { get; set; }

			public string IpAddress { get; set; }

			public bool? IsDraft { get; set; }

			///
			///If true, the shopper can return any of the items in this order to the tenant.
			///
			public bool IsEligibleForReturns { get; set; }

			public bool? IsImport { get; set; }

			///
			///isPartialOrder ApiType DOCUMENT_HERE 
			///
			public bool IsPartialOrder { get; set; }

			public bool? IsTaxExempt { get; set; }

			public List<OrderItem> Items { get; set; }

			public decimal? ItemTaxTotal { get; set; }

			public DateTime? LastValidationDate { get; set; }

			///
			///The total charge for the line item with all weighted order level manual adjustments.
			///
			public decimal? LineItemSubtotalWithOrderAdjustments { get; set; }

			public string LocationCode { get; set; }

			public List<OrderNote> Notes { get; set; }

			public List<AppliedDiscount> OrderDiscounts { get; set; }

			public int? OrderNumber { get; set; }

			public string OriginalCartId { get; set; }

			public List<Package> Packages { get; set; }

			///
			///parentCheckoutId ApiType DOCUMENT_HERE 
			///
			public string ParentCheckoutId { get; set; }

			///
			///parentCheckoutNumber ApiType DOCUMENT_HERE 
			///
			public int? ParentCheckoutNumber { get; set; }

			///
			///If this Order has a parent Order, the parent Order ID is recorded here.
			///
			public string ParentOrderId { get; set; }

			///
			///If the Order has a parent Order, the order number is recorded here.
			///
			public int? ParentOrderNumber { get; set; }

			public string ParentReturnId { get; set; }

			///
			///If the Order has a parent Order with a return, the return number is recorded here.
			///
			public int? ParentReturnNumber { get; set; }

			///
			///partialOrderCount ApiType DOCUMENT_HERE 
			///
			public int? PartialOrderCount { get; set; }

			///
			///partialOrderNumber ApiType DOCUMENT_HERE 
			///
			public int? PartialOrderNumber { get; set; }

			public List<Payment> Payments { get; set; }

			public string PaymentStatus { get; set; }

			public List<Pickup> Pickups { get; set; }

			///
			///If the order is associated with a price list, this is the unique code of the price list.
			///
			public string PriceListCode { get; set; }

			///
			///Refunds associated with this order. A refund is a single exchange of money from merchant to customer that either encapsulates a refund to a credit card or an issuance of a store credit. Refunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.
			///
			public List<Refund> Refunds { get; set; }

			public List<SuggestedDiscount> RejectedDiscounts { get; set; }

			public string ReturnStatus { get; set; }

			public List<Shipment> Shipments { get; set; }

			public Adjustment ShippingAdjustment { get; set; }

			///
			///The total shipping amount for the order before discounts and adjustments.
			///
			public decimal? ShippingAmountBeforeDiscountsAndAdjustments { get; set; }

			public List<ShippingDiscount> ShippingDiscounts { get; set; }

			public decimal? ShippingSubTotal { get; set; }

			public decimal? ShippingTaxTotal { get; set; }

			public decimal? ShippingTotal { get; set; }

			public ShopperNotes ShopperNotes { get; set; }

			public int? SiteId { get; set; }

			public string SourceDevice { get; set; }

			public string Status { get; set; }

			public DateTime? SubmittedDate { get; set; }

			public decimal? Subtotal { get; set; }

			public List<SuggestedDiscount> SuggestedDiscounts { get; set; }

			///
			///Leverage this property within a [tax Arc.js action](https://www.mozu.com/docs/arcjs/commerce-catalog-storefront-tax/commerce-catalog-storefront-tax.htm) to supplement the tax information for this item or object with custom JSON data.
			///
			public JObject TaxData { get; set; }

			public decimal? TaxTotal { get; set; }

			public int? TenantId { get; set; }

			public decimal? Total { get; set; }

			public decimal TotalCollected { get; set; }

			///
			///This specifies the order type. This means, was this order placed online or offline? Online means shopper created the order at checkout, offline means the order was a phone order.
			///
			public string Type { get; set; }

			public string UserId { get; set; }

			///
			///Response returned by an order validation capability application.
			///
			public List<OrderValidationResult> ValidationResults { get; set; }

			public string Version { get; set; }

			public string VisitId { get; set; }

			public string WebSessionId { get; set; }

		}

}