
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;

using Mozu.Api.Contracts.CommerceRuntime.Commerce;
using Mozu.Api.Contracts.CommerceRuntime.Discounts;
using Mozu.Api.Contracts.CommerceRuntime.Fulfillment;
using Mozu.Api.Contracts.CommerceRuntime.Payments;
using Mozu.Api.Contracts.CommerceRuntime.Refunds;
using Mozu.Api.Contracts.Core;

namespace Mozu.Api.Contracts.CommerceRuntime.Orders
{
		///
		///	Properties of an order, including its components.
		///
		public class Order
		{
			///
			///The date and time the order was accepted by the tenant.
			///
			public DateTime? AcceptedDate { get; set; }

			///
			///If true, the customer account associated with the order is opted in to receive marketing materials.
			///
			public bool? AcceptsMarketing { get; set; }

			public Adjustment Adjustment { get; set; }

			///
			///The amount of the order the shopper can receive in the event of a return. This amount represents the amount captured at the time the order was submitted, not when the order was returned.
			///
			public decimal AmountAvailableForRefund { get; set; }

			public decimal AmountRefunded { get; set; }

			///
			///The total amount of the order not currently associated with a payment. The shopper must create one or more payments to satisfy this amount before the order can be fully paid.
			///
			public decimal AmountRemainingForPayment { get; set; }

			public List<OrderAttribute> Attributes { get; set; }

			public AuditInfo AuditInfo { get; set; }

			public List<string> AvailableActions { get; set; }

			public BillingInfo BillingInfo { get; set; }

			public DateTime? CancelledDate { get; set; }

			public List<ChangeMessage> ChangeMessages { get; set; }

			public string ChannelCode { get; set; }

			public DateTime? ClosedDate { get; set; }

			public List<string> CouponCodes { get; set; }

			public string CurrencyCode { get; set; }

			public int? CustomerAccountId { get; set; }

			public string CustomerInteractionType { get; set; }

			public string CustomerTaxId { get; set; }

			public JObject Data { get; set; }

			///
			///Specifies the fulfillment of digital packages associated with this order.
			///
			public List<DigitalPackage> DigitalPackages { get; set; }

			public decimal? DiscountedSubtotal { get; set; }

			public decimal? DiscountedTotal { get; set; }

			public decimal? DiscountTotal { get; set; }

			public decimal? DutyAmount { get; set; }

			public decimal? DutyTotal { get; set; }

			public string Email { get; set; }

			public DateTime? ExpirationDate { get; set; }

			public List<ExtendedProperty> ExtendedProperties { get; set; }

			///
			///Unique identifier used by an external program to identify a Mozu order.
			///
			public string ExternalId { get; set; }

			public decimal? FeeTotal { get; set; }

			public FulfillmentInfo FulfillmentInfo { get; set; }

			public string FulfillmentStatus { get; set; }

			public Adjustment HandlingAdjustment { get; set; }

			public decimal? HandlingAmount { get; set; }

			public List<AppliedDiscount> HandlingDiscounts { get; set; }

			public decimal? HandlingSubTotal { get; set; }

			public decimal? HandlingTaxTotal { get; set; }

			///
			///This total represents the handling amount value with any applied discounts.
			///
			public decimal? HandlingTotal { get; set; }

			public bool? HasDraft { get; set; }

			public string Id { get; set; }

			///
			///If the order was imported from an external program, the date and time the order was imported into Mozu.
			///
			public DateTime? ImportDate { get; set; }

			///
			///List of invalid coupon codes the shopper entered for the order.
			///
			public List<InvalidCoupon> InvalidCoupons { get; set; }

			public string IpAddress { get; set; }

			public bool? IsDraft { get; set; }

			///
			///If true, the shopper can return any of the items in this order to the tenant.
			///
			public bool IsEligibleForReturns { get; set; }

			public bool? IsImport { get; set; }

			public bool IsPartialOrder { get; set; }

			public bool? IsTaxExempt { get; set; }

			public List<OrderItem> Items { get; set; }

			public decimal? ItemTaxTotal { get; set; }

			public DateTime? LastValidationDate { get; set; }

			public decimal? LineItemSubtotalWithOrderAdjustments { get; set; }

			public string LocationCode { get; set; }

			public List<OrderNote> Notes { get; set; }

			public List<AppliedDiscount> OrderDiscounts { get; set; }

			public int? OrderNumber { get; set; }

			public string OriginalCartId { get; set; }

			public List<Package> Packages { get; set; }

			public string ParentCheckoutId { get; set; }

			public int? ParentCheckoutNumber { get; set; }

			public string ParentOrderId { get; set; }

			public int? ParentOrderNumber { get; set; }

			public string ParentReturnId { get; set; }

			public int? ParentReturnNumber { get; set; }

			public int? PartialOrderCount { get; set; }

			public int? PartialOrderNumber { get; set; }

			public List<Payment> Payments { get; set; }

			public string PaymentStatus { get; set; }

			public List<Pickup> Pickups { get; set; }

			public string PriceListCode { get; set; }

			public List<Refund> Refunds { get; set; }

			public string ReturnStatus { get; set; }

			public List<Shipment> Shipments { get; set; }

			public Adjustment ShippingAdjustment { get; set; }

			public decimal? ShippingAmountBeforeDiscountsAndAdjustments { get; set; }

			public List<ShippingDiscount> ShippingDiscounts { get; set; }

			public decimal? ShippingSubTotal { get; set; }

			public decimal? ShippingTaxTotal { get; set; }

			public decimal? ShippingTotal { get; set; }

			public ShopperNotes ShopperNotes { get; set; }

			public int? SiteId { get; set; }

			public string SourceDevice { get; set; }

			public string Status { get; set; }

			public DateTime? SubmittedDate { get; set; }

			public decimal? Subtotal { get; set; }

			public List<SuggestedDiscount> SuggestedDiscounts { get; set; }

			public JObject TaxData { get; set; }

			public decimal? TaxTotal { get; set; }

			public int? TenantId { get; set; }

			public decimal? Total { get; set; }

			public decimal TotalCollected { get; set; }

			///
			///This specifies the order type. This means, was this order placed online or offline? Online means shopper created the order at checkout, offline means the order was a phone order.
			///
			public string Type { get; set; }

			///
			///Response returned by an order validation capability application.
			///
			public List<OrderValidationResult> ValidationResults { get; set; }

			public string Version { get; set; }

			public string VisitId { get; set; }

			public string WebSessionId { get; set; }

		}

}