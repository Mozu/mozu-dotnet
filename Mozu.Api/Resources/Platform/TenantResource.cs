
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Platform
{
	/// <summary>
	/// Use the tenants resource to manage information about a Mozu tenant.
	/// </summary>
	public partial class TenantResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public TenantResource() 
		{
			_apiContext = null;
		}
		 public TenantResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public TenantResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new TenantResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// Retrieve details about a specific tenant by providing the tenant ID.
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="tenantId">Unique identifier of the Mozu tenant.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Tenant.Tenant"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var tenant = new Tenant();
		///   var tenant = await tenant.GetTenantAsync( tenantId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Tenant.Tenant> GetTenantAsync(int tenantId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Tenant.Tenant> response;
			var client = Mozu.Api.Clients.Platform.TenantClient.GetTenantClient( tenantId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


