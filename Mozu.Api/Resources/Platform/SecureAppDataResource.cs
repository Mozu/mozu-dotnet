
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Platform
{
	/// <summary>
	/// 
	/// </summary>
	public partial class SecureAppDataResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public SecureAppDataResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public SecureAppDataResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new SecureAppDataResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="appKeyId"></param>
		/// <param name="dbEntryQuery"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// JObject
		/// </returns>
		/// <example>
		/// <code>
		///   var secureappdata = new SecureAppData();
		///   var json = await secureappdata.GetDBValueAsync( appKeyId,  dbEntryQuery,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<JObject> GetDBValueAsync(string appKeyId, string dbEntryQuery, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<JObject> response;
			var client = Mozu.Api.Clients.Platform.SecureAppDataClient.GetDBValueClient( appKeyId,  dbEntryQuery,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="appKeyId"></param>
		/// <param name="dbEntryQuery"></param>
		/// <param name="value"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var secureappdata = new SecureAppData();
		///   await secureappdata.CreateDBValueAsync( value,  appKeyId,  dbEntryQuery);
		/// </code>
		/// </example>
		public virtual async Task CreateDBValueAsync(JObject value, string appKeyId, string dbEntryQuery, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.SecureAppDataClient.CreateDBValueClient( value,  appKeyId,  dbEntryQuery);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="appKeyId"></param>
		/// <param name="dbEntryQuery"></param>
		/// <param name="value"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var secureappdata = new SecureAppData();
		///   await secureappdata.UpdateDBValueAsync( value,  appKeyId,  dbEntryQuery);
		/// </code>
		/// </example>
		public virtual async Task UpdateDBValueAsync(JObject value, string appKeyId, string dbEntryQuery, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.SecureAppDataClient.UpdateDBValueClient( value,  appKeyId,  dbEntryQuery);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="appKeyId"></param>
		/// <param name="dbEntryQuery"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var secureappdata = new SecureAppData();
		///   await secureappdata.DeleteDBValueAsync( appKeyId,  dbEntryQuery);
		/// </code>
		/// </example>
		public virtual async Task DeleteDBValueAsync(string appKeyId, string dbEntryQuery, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.SecureAppDataClient.DeleteDBValueClient( appKeyId,  dbEntryQuery);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


