
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Platform.Appdev
{
	/// <summary>
	/// This resource is not public.
	/// </summary>
	public partial class PackageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public PackageResource() 
		{
			_apiContext = null;
		}
		 public PackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public PackageResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new PackageResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey">The application key uniquely identifies the developer namespace, application ID, version, and package in Dev Center. The format is {Dev Account namespace}.{Application ID}.{Application Version}.{Package name}. </param>
		/// <param name="fileName"></param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var stream = await package.GetFileAsync( applicationKey,  fileName);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> GetFileAsync(string applicationKey, string fileName, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Platform.Appdev.PackageClient.GetFileClient( applicationKey,  fileName);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


