
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Platform.Appdev
{
	/// <summary>
	/// 
	/// </summary>
	public partial class AppPackageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public AppPackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public AppPackageResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new AppPackageResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageSummaryCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var packageSummaryCollection = await apppackage.GetAllPackagesAsync( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.PackageSummaryCollection> GetAllPackagesAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageSummaryCollection> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.GetAllPackagesClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="includeChildren"></param>
		/// <param name="responseFields"></param>
		/// <param name="skipDevAccountCheck"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var package = await apppackage.GetPackageAsync( applicationKey,  includeChildren,  skipDevAccountCheck,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> GetPackageAsync(string applicationKey, bool? includeChildren =  null, bool? skipDevAccountCheck =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.GetPackageClient( applicationKey,  includeChildren,  skipDevAccountCheck,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var packageCollection = await apppackage.GetPackagesAsync( applicationKey,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.PackageCollection> GetPackagesAsync(string applicationKey, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.GetPackagesClient( applicationKey,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="appId"></param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.AppDev.ApplicationSummary"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var applicationSummary = await apppackage.GetApplicationSummaryChildrenAsync( appId);
		/// </code>
		/// </example>
		public virtual async Task<List<Mozu.Api.Contracts.AppDev.ApplicationSummary>> GetApplicationSummaryChildrenAsync(string appId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<List<Mozu.Api.Contracts.AppDev.ApplicationSummary>> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.GetApplicationSummaryChildrenClient( appId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationSummaryCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var applicationSummaryCollection = await apppackage.GetApplicationSummaryParentsAsync( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.ApplicationSummaryCollection> GetApplicationSummaryParentsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationSummaryCollection> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.GetApplicationSummaryParentsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="packageName"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var package = await apppackage.ClonePackageAsync( applicationKey,  packageName,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> ClonePackageAsync(string applicationKey, string packageName, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.ClonePackageClient( applicationKey,  packageName,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields"></param>
		/// <param name="packageRequest"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var package = await apppackage.CreateNewCorePackageAsync( packageRequest,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> CreateNewCorePackageAsync(Mozu.Api.Contracts.AppDev.PackageRequest packageRequest, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.CreateNewCorePackageClient( packageRequest,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="projectId"></param>
		/// <param name="responseFields"></param>
		/// <param name="package"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var package = await apppackage.CreatePackageAsync( pkg,  projectId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> CreatePackageAsync(Mozu.Api.Contracts.AppDev.Package pkg, int? projectId =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.CreatePackageClient( pkg,  projectId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="responseFields"></param>
		/// <param name="package"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   var package = await apppackage.UpdatePackageAsync( pkg,  applicationKey,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> UpdatePackageAsync(Mozu.Api.Contracts.AppDev.Package pkg, string applicationKey, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.UpdatePackageClient( pkg,  applicationKey,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var apppackage = new AppPackage();
		///   await apppackage.DeletePackageAsync( applicationKey);
		/// </code>
		/// </example>
		public virtual async Task DeletePackageAsync(string applicationKey, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Appdev.AppPackageClient.DeletePackageClient( applicationKey);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


