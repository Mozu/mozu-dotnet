
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Platform
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ApplicationResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public ApplicationResource() 
		{
			_apiContext = null;
		}
		 public ApplicationResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public ApplicationResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new ApplicationResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageNamesCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var packageNamesCollection = await application.GetAppPackageNamesAsync( applicationKey,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.PackageNamesCollection> GetAppPackageNamesAsync(string applicationKey, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageNamesCollection> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.GetAppPackageNamesClient( applicationKey,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="nsAndAppId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationVersionsCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var applicationVersionsCollection = await application.GetAppVersionsAsync( nsAndAppId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.ApplicationVersionsCollection> GetAppVersionsAsync(string nsAndAppId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersionsCollection> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.GetAppVersionsClient( nsAndAppId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="filepath"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = await application.GetPackageFileMetadataAsync( applicationKey,  filepath,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> GetPackageFileMetadataAsync(string applicationKey, string filepath, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.GetPackageFileMetadataClient( applicationKey,  filepath,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var folderMetadata = await application.GetPackageMetadataAsync( applicationKey,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.FolderMetadata> GetPackageMetadataAsync(string applicationKey, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.GetPackageMetadataClient( applicationKey,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="filepath"></param>
		/// <param name="lastModifiedTime"></param>
		/// <param name="responseFields"></param>
		/// <param name="stream"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = await application.UpsertPackageFileAsync( stream,  applicationKey,  filepath,  lastModifiedTime,  responseFields,  contentType);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> UpsertPackageFileAsync(System.IO.Stream stream, string applicationKey, string filepath, string lastModifiedTime =  null, string responseFields =  null, String  contentType= null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.UpsertPackageFileClient( stream,  applicationKey,  filepath,  lastModifiedTime,  responseFields,  contentType);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="responseFields"></param>
		/// <param name="renameInfo"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = await application.RenamePackageFileAsync( renameInfo,  applicationKey,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> RenamePackageFileAsync(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, string applicationKey, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.RenamePackageFileClient( renameInfo,  applicationKey,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationKey"></param>
		/// <param name="filepath"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   await application.DeletePackageFileAsync( applicationKey,  filepath);
		/// </code>
		/// </example>
		public virtual async Task DeletePackageFileAsync(string applicationKey, string filepath, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.ApplicationClient.DeletePackageFileClient( applicationKey,  filepath);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


