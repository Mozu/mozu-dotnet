
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Resources.Commerce.Catalog.Admin.Couponsets
{
	/// <summary>
	/// Use the Coupons subresource to manage coupons within manual coupon sets.
	/// </summary>
	public partial class CouponResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public CouponResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public CouponResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new CouponResource(_apiContext.CloneWith(contextModification));
		}

				
		/// <summary>
		/// Retrieves the details of the specified coupon. Use the couponSetCode and the couponCode parameter to specify the coupon within a coupon set. Use the includeCounts paramter to specify whether to return the redemptionCount property in the response body object.
		/// </summary>
		/// <param name="couponCode">Code associated with the coupon to remove from the cart.</param>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <param name="includeCounts">Specifies whether to return the redemptionCount property in the response body object.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. For example, ) returns only the  and  items inside the  array of the specified product.This paramter should only be used to retrieve data. Attempting to update data using this parmater may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.Coupon"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   var coupon = coupon.GetCoupon( couponSetCode,  couponCode,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.ProductAdmin.Coupon GetCoupon(string couponSetCode, string couponCode, bool? includeCounts =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.Coupon> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.GetCouponClient( couponSetCode,  couponCode,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of the specified coupon. Use the couponSetCode and the couponCode parameter to specify the coupon within a coupon set. Use the includeCounts paramter to specify whether to return the redemptionCount property in the response body object.
		/// </summary>
		/// <param name="couponCode">Code associated with the coupon to remove from the cart.</param>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <param name="includeCounts">Specifies whether to return the redemptionCount property in the response body object.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. For example, ) returns only the  and  items inside the  array of the specified product.This paramter should only be used to retrieve data. Attempting to update data using this parmater may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.Coupon"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   var coupon = await coupon.GetCouponAsync( couponSetCode,  couponCode,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.Coupon> GetCouponAsync(string couponSetCode, string couponCode, bool? includeCounts =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.Coupon> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.GetCouponClient( couponSetCode,  couponCode,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of coupons in a specified coupon set according to any specified filter criteria and sort options.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupons belongs to.</param>
		/// <param name="filter">A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.</param>
		/// <param name="includeCounts">Specifies whether to include the redemptionCount property in the response body object.</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. For example, ) returns only the  and  items inside the  array of the specified product.This paramter should only be used to retrieve data. Attempting to update data using this parmater may cause data loss.</param>
		/// <param name="sortBy">The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=50`.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   var couponCollection = coupon.GetCoupons( couponSetCode,  startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.ProductAdmin.CouponCollection GetCoupons(string couponSetCode, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, bool? includeCounts =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.GetCouponsClient( couponSetCode,  startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of coupons in a specified coupon set according to any specified filter criteria and sort options.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupons belongs to.</param>
		/// <param name="filter">A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.</param>
		/// <param name="includeCounts">Specifies whether to include the redemptionCount property in the response body object.</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The amount is divided and displayed on the `pageCount `amount of pages. The default is 20 and maximum value is 200 per page.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. For example, ) returns only the  and  items inside the  array of the specified product.This paramter should only be used to retrieve data. Attempting to update data using this parmater may cause data loss.</param>
		/// <param name="sortBy">The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a `pageSize `of 25, to get the 51st through the 75th items, use `startIndex=50`.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   var couponCollection = await coupon.GetCouponsAsync( couponSetCode,  startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CouponCollection> GetCouponsAsync(string couponSetCode, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, bool? includeCounts =  null, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.GetCouponsClient( couponSetCode,  startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Adds coupons  to a specified manual coupon set. Use the couponSetCode parameter to specify the manual coupon set.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set.</param>
		/// <param name="coupons">Mozu.ProductAdmin.Contracts.Coupon ApiType DOCUMENT_HERE </param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   coupon.AddCoupons( coupons,  couponSetCode);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void AddCoupons(List<Mozu.Api.Contracts.ProductAdmin.Coupon> coupons, string couponSetCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.AddCouponsClient( coupons,  couponSetCode);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// Adds coupons  to a specified manual coupon set. Use the couponSetCode parameter to specify the manual coupon set.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set.</param>
		/// <param name="coupons">Mozu.ProductAdmin.Contracts.Coupon ApiType DOCUMENT_HERE </param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   await coupon.AddCouponsAsync( coupons,  couponSetCode);
		/// </code>
		/// </example>
		public virtual async Task AddCouponsAsync(List<Mozu.Api.Contracts.ProductAdmin.Coupon> coupons, string couponSetCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.AddCouponsClient( coupons,  couponSetCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}

		/// <summary>
		/// Deletes the specified coupons and removes them from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <param name="couponCodes">The unique identifiers of the coupons to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   coupon.DeleteCoupons( couponCodes,  couponSetCode);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void DeleteCoupons(List<string> couponCodes, string couponSetCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.DeleteCouponsClient( couponCodes,  couponSetCode);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// Deletes the specified coupons and removes them from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <param name="couponCodes">The unique identifiers of the coupons to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   await coupon.DeleteCouponsAsync( couponCodes,  couponSetCode);
		/// </code>
		/// </example>
		public virtual async Task DeleteCouponsAsync(List<string> couponCodes, string couponSetCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.DeleteCouponsClient( couponCodes,  couponSetCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}

		/// <summary>
		/// Deletes the specified coupon and remove it from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
		/// </summary>
		/// <param name="couponCode">Code associated with the coupon to remove from the cart.</param>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   coupon.DeleteCoupon( couponSetCode,  couponCode);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void DeleteCoupon(string couponSetCode, string couponCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.DeleteCouponClient( couponSetCode,  couponCode);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		/// <summary>
		/// Deletes the specified coupon and remove it from the coupon set. You can only delete a coupon if it has not been redeemed. Use the canBeDeleted property to determine whether a coupon can be deleted.
		/// </summary>
		/// <param name="couponCode">Code associated with the coupon to remove from the cart.</param>
		/// <param name="couponSetCode">The unique identifier of the coupon set that the coupon belongs to.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var coupon = new Coupon();
		///   await coupon.DeleteCouponAsync( couponSetCode,  couponCode);
		/// </code>
		/// </example>
		public virtual async Task DeleteCouponAsync(string couponSetCode, string couponCode)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.Couponsets.CouponClient.DeleteCouponClient( couponSetCode,  couponCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}


	}

}


