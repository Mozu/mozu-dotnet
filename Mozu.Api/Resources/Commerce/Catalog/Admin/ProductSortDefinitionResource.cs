
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Catalog.Admin
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ProductSortDefinitionResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		private readonly DataViewMode _dataViewMode;
		
		public ProductSortDefinitionResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
			_dataViewMode = DataViewMode.Live;
		}

		public ProductSortDefinitionResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new ProductSortDefinitionResource(_apiContext.CloneWith(contextModification), _dataViewMode);
		}

		public ProductSortDefinitionResource(IApiContext apiContext, DataViewMode dataViewMode) 
		{
			_apiContext = apiContext;
			_dataViewMode = dataViewMode;
		}
				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductSortDefinitionPagedCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsortdefinition = new ProductSortDefinition();
		///   var productSortDefinitionPagedCollection = await productsortdefinition.GetProductSortDefinitionsAsync(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinitionPagedCollection> GetProductSortDefinitionsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinitionPagedCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductSortDefinitionClient.GetProductSortDefinitionsClient(_dataViewMode,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="productSortDefinitionId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsortdefinition = new ProductSortDefinition();
		///   var productSortDefinition = await productsortdefinition.GetProductSortDefinitionAsync(_dataViewMode,  productSortDefinitionId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> GetProductSortDefinitionAsync(int productSortDefinitionId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductSortDefinitionClient.GetProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields"></param>
		/// <param name="useProvidedId"></param>
		/// <param name="definition"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsortdefinition = new ProductSortDefinition();
		///   var productSortDefinition = await productsortdefinition.AddProductSortDefinitionAsync(_dataViewMode,  definition,  useProvidedId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> AddProductSortDefinitionAsync(Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition definition, bool? useProvidedId =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductSortDefinitionClient.AddProductSortDefinitionClient(_dataViewMode,  definition,  useProvidedId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="productSortDefinitionId"></param>
		/// <param name="responseFields"></param>
		/// <param name="definition"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var productsortdefinition = new ProductSortDefinition();
		///   var productSortDefinition = await productsortdefinition.UpdateProductSortDefinitionAsync(_dataViewMode,  definition,  productSortDefinitionId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> UpdateProductSortDefinitionAsync(Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition definition, int productSortDefinitionId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductSortDefinition> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductSortDefinitionClient.UpdateProductSortDefinitionClient(_dataViewMode,  definition,  productSortDefinitionId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="productSortDefinitionId"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var productsortdefinition = new ProductSortDefinition();
		///   await productsortdefinition.DeleteProductSortDefinitionAsync(_dataViewMode,  productSortDefinitionId);
		/// </code>
		/// </example>
		public virtual async Task DeleteProductSortDefinitionAsync(int productSortDefinitionId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.ProductSortDefinitionClient.DeleteProductSortDefinitionClient(_dataViewMode,  productSortDefinitionId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


