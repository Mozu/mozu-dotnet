
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Catalog.Admin
{
	/// <summary>
	/// Manage the currency localization rules and exchange rates for any of the currencies that are supported for placing orders in.
	/// </summary>
	public partial class CurrencyLocalizationResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public CurrencyLocalizationResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public CurrencyLocalizationResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new CurrencyLocalizationResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyLocalizationCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyLocalizationCollection = await currencylocalization.GetCurrencyLocalizationsAsync( responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalizationCollection> GetCurrencyLocalizationsAsync(string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalizationCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.GetCurrencyLocalizationsClient( responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="toCurrencyCode">The code of the new currency that the original currency's equivalent is being calculated to.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRate"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyExchangeRate = await currencylocalization.GetCurrencyExchangeRateAsync( currencyCode,  toCurrencyCode,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRate> GetCurrencyExchangeRateAsync(string currencyCode, string toCurrencyCode, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRate> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.GetCurrencyExchangeRateClient( currencyCode,  toCurrencyCode,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRateCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyExchangeRateCollection = await currencylocalization.GetCurrencyExchangeRatesAsync( currencyCode,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRateCollection> GetCurrencyExchangeRatesAsync(string currencyCode, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRateCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.GetCurrencyExchangeRatesClient( currencyCode,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyLocalization = await currencylocalization.GetCurrencyLocalizationAsync( currencyCode,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> GetCurrencyLocalizationAsync(string currencyCode, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.GetCurrencyLocalizationClient( currencyCode,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="currencyLocalization">The currency localization strategies being added to the currency data.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyLocalization = await currencylocalization.AddCurrencyLocalizationAsync( currencyLocalization,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> AddCurrencyLocalizationAsync(Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization currencyLocalization, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.AddCurrencyLocalizationClient( currencyLocalization,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="currencyExchangeRates">All of the exchange rates being provided.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var stream = await currencylocalization.AddCurrencyExchangeRatesAsync( currencyExchangeRates,  currencyCode);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> AddCurrencyExchangeRatesAsync(List<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRate> currencyExchangeRates, string currencyCode, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.AddCurrencyExchangeRatesClient( currencyExchangeRates,  currencyCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="currencyExchangeRates"></param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var stream = await currencylocalization.UpdateCurrencyExchangeRatesAsync( currencyExchangeRates,  currencyCode);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> UpdateCurrencyExchangeRatesAsync(List<Mozu.Api.Contracts.ProductAdmin.CurrencyExchangeRate> currencyExchangeRates, string currencyCode, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.UpdateCurrencyExchangeRatesClient( currencyExchangeRates,  currencyCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="currencyLocalization">The currency localization information being updated.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var currencyLocalization = await currencylocalization.UpdateCurrencyLocalizationAsync( currencyLocalization,  currencyCode,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> UpdateCurrencyLocalizationAsync(Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization currencyLocalization, string currencyCode, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CurrencyLocalization> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.UpdateCurrencyLocalizationClient( currencyLocalization,  currencyCode,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var stream = await currencylocalization.DeleteCurrencyLocalizationAsync( currencyCode);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> DeleteCurrencyLocalizationAsync(string currencyCode, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.DeleteCurrencyLocalizationClient( currencyCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="currencyCode">The three character ISOÂ currency code, such as USDÂ for US Dollars.</param>
		/// <param name="toCurrencyCode">The code of the new currency that the original currency's equivalent is being calculated to.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var currencylocalization = new CurrencyLocalization();
		///   var stream = await currencylocalization.DeleteCurrencyExchangeRateAsync( currencyCode,  toCurrencyCode);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> DeleteCurrencyExchangeRateAsync(string currencyCode, string toCurrencyCode, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CurrencyLocalizationClient.DeleteCurrencyExchangeRateClient( currencyCode,  toCurrencyCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


