
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Catalog.Admin
{
	/// <summary>
	/// Use the Coupon Sets resource to view and create coupon sets. You can use coupon sets to group multiple coupon codes together and associate them with one or more discounts. Use the  subresource to manage the coupon codes within manual coupon sets. Use the  subresource to mange the discounts assigned to coupon sets.
	/// </summary>
	public partial class CouponSetResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public CouponSetResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public CouponSetResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new CouponSetResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter">A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for a list of supported filters.</param>
		/// <param name="includeCounts">Specifies whether to include the number of redeemed coupons, existing coupon codes, and assigned discounts in the response body.</param>
		/// <param name="pageSize">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="sortBy">The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for more information.</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponSetCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   var couponSetCollection = await couponset.GetCouponSetsAsync( startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CouponSetCollection> GetCouponSetsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, bool? includeCounts =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponSetCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.GetCouponSetsClient( startIndex,  pageSize,  sortBy,  filter,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set.</param>
		/// <param name="includeCounts">Specifies whether to include the number of redeemed coupons, existing coupon codes, and assigned discounts in the response body.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponSet"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   var couponSet = await couponset.GetCouponSetAsync( couponSetCode,  includeCounts,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CouponSet> GetCouponSetAsync(string couponSetCode, bool? includeCounts =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponSet> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.GetCouponSetClient( couponSetCode,  includeCounts,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// string
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   var string = await couponset.GetUniqueCouponSetCodeAsync( responseFields);
		/// </code>
		/// </example>
		public virtual async Task<string> GetUniqueCouponSetCodeAsync(string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<string> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.GetUniqueCouponSetCodeClient( responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="couponSet">The details of the new coupon set.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponSet"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   var couponSet = await couponset.AddCouponSetAsync( couponSet,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CouponSet> AddCouponSetAsync(Mozu.Api.Contracts.ProductAdmin.CouponSet couponSet, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponSet> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.AddCouponSetClient( couponSet,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   await couponset.ValidateUniqueCouponSetCodeAsync( code);
		/// </code>
		/// </example>
		public virtual async Task ValidateUniqueCouponSetCodeAsync(string code, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.ValidateUniqueCouponSetCodeClient( code);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="couponSet">The details of the updated coupon set.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductAdmin.CouponSet"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   var couponSet = await couponset.UpdateCouponSetAsync( couponSet,  couponSetCode,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.ProductAdmin.CouponSet> UpdateCouponSetAsync(Mozu.Api.Contracts.ProductAdmin.CouponSet couponSet, string couponSetCode, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.ProductAdmin.CouponSet> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.UpdateCouponSetClient( couponSet,  couponSetCode,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="couponSetCode">The unique identifier of the coupon set.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var couponset = new CouponSet();
		///   await couponset.DeleteCouponSetAsync( couponSetCode);
		/// </code>
		/// </example>
		public virtual async Task DeleteCouponSetAsync(string couponSetCode, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Admin.CouponSetClient.DeleteCouponSetClient( couponSetCode);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


