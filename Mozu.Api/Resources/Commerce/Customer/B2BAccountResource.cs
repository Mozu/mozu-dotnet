
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// 
	/// </summary>
	public partial class B2BAccountResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public B2BAccountResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public B2BAccountResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new B2BAccountResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="fields"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="q"></param>
		/// <param name="qLimit"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BAccountCollection = await b2baccount.GetB2BAccountsAsync( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BAccountCollection> GetB2BAccountsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string fields =  null, string q =  null, int? qLimit =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BAccountCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetB2BAccountsClient( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="attributeFQN"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var customerAttribute = await b2baccount.GetB2BAccountAttributeAsync( accountId,  attributeFQN,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerAttribute> GetB2BAccountAttributeAsync(int accountId, string attributeFQN, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetB2BAccountAttributeClient( accountId,  attributeFQN,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var customerAttributeCollection = await b2baccount.GetB2BAccountAttributesAsync( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerAttributeCollection> GetB2BAccountAttributesAsync(int accountId, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttributeCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetB2BAccountAttributesClient( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="userId"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.UserRoleCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var userRoleCollection = await b2baccount.GetUserRolesAsyncAsync( accountId,  userId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.UserRoleCollection> GetUserRolesAsyncAsync(int accountId, string userId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.UserRoleCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetUserRolesAsyncClient( accountId,  userId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="q"></param>
		/// <param name="qLimit"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BUserCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BUserCollection = await b2baccount.GetUsersAsync( accountId,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BUserCollection> GetUsersAsync(int accountId, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string q =  null, int? qLimit =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BUserCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetUsersClient( accountId,  startIndex,  pageSize,  sortBy,  filter,  q,  qLimit,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BAccount = await b2baccount.GetB2BAccountAsync( accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BAccount> GetB2BAccountAsync(int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.GetB2BAccountClient( accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields"></param>
		/// <param name="account"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BAccount = await b2baccount.AddAccountAsync( account,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BAccount> AddAccountAsync(Mozu.Api.Contracts.Customer.B2BAccount account, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.AddAccountClient( account,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="attribute"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var customerAttribute = await b2baccount.AddB2BAccountAttributeAsync( attribute,  accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerAttribute> AddB2BAccountAttributeAsync(Mozu.Api.Contracts.Customer.CustomerAttribute attribute, int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.AddB2BAccountAttributeClient( attribute,  accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="roleId"></param>
		/// <param name="userId"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   await b2baccount.AddUserRoleAsyncAsync( accountId,  userId,  roleId);
		/// </code>
		/// </example>
		public virtual async Task AddUserRoleAsyncAsync(int accountId, string userId, int roleId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.AddUserRoleAsyncClient( accountId,  userId,  roleId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="user"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BUser"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BUser = await b2baccount.AddUserAsync( user,  accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BUser> AddUserAsync(Mozu.Api.Contracts.Customer.B2BUserAndAuthInfo user, int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BUser> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.AddUserClient( user,  accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="attributeFQN"></param>
		/// <param name="responseFields"></param>
		/// <param name="attribute"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var customerAttribute = await b2baccount.UpdateB2BAccountAttributeAsync( attribute,  accountId,  attributeFQN,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerAttribute> UpdateB2BAccountAttributeAsync(Mozu.Api.Contracts.Customer.CustomerAttribute attribute, int accountId, string attributeFQN, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.UpdateB2BAccountAttributeClient( attribute,  accountId,  attributeFQN,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="userId"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   await b2baccount.RemoveUserAsync( accountId,  userId);
		/// </code>
		/// </example>
		public virtual async Task RemoveUserAsync(int accountId, string userId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.RemoveUserClient( accountId,  userId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="userId"></param>
		/// <param name="user"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BUser"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BUser = await b2baccount.UpdateUserAsync( user,  accountId,  userId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BUser> UpdateUserAsync(Mozu.Api.Contracts.Customer.B2BUser user, int accountId, string userId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BUser> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.UpdateUserClient( user,  accountId,  userId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="account"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.B2BAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   var b2BAccount = await b2baccount.UpdateAccountAsync( account,  accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.B2BAccount> UpdateAccountAsync(Mozu.Api.Contracts.Customer.B2BAccount account, int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.B2BAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.UpdateAccountClient( account,  accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="attributeFQN"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   await b2baccount.DeleteB2BAccountAttributeAsync( accountId,  attributeFQN);
		/// </code>
		/// </example>
		public virtual async Task DeleteB2BAccountAttributeAsync(int accountId, string attributeFQN, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.DeleteB2BAccountAttributeClient( accountId,  attributeFQN);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="roleId"></param>
		/// <param name="userId"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var b2baccount = new B2BAccount();
		///   await b2baccount.RemoveUserRoleAsyncAsync( accountId,  userId,  roleId);
		/// </code>
		/// </example>
		public virtual async Task RemoveUserRoleAsyncAsync(int accountId, string userId, int roleId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.B2BAccountClient.RemoveUserRoleAsyncClient( accountId,  userId,  roleId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


