
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Customer.Accounts
{
	/// <summary>
	/// Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
	/// </summary>
	public partial class CustomerContactResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public CustomerContactResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public CustomerContactResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new CustomerContactResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account whose contact information is being retrieved.</param>
		/// <param name="contactId">Unique identifier of the customer account contact to retrieve.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = await customercontact.GetAccountContactAsync( accountId,  contactId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerContact> GetAccountContactAsync(int accountId, int contactId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactClient( accountId,  contactId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account associated with the contact information to retrieve.</param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContactCollection = await customercontact.GetAccountContactsAsync( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerContactCollection> GetAccountContactsAsync(int accountId, int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerContactCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactsClient( accountId,  startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account containing the new contact.</param>
		/// <param name="responseFields"></param>
		/// <param name="contact">Properties of the new contact. Required properties: Contact.Email, ContactType.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = await customercontact.AddAccountContactAsync( contact,  accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerContact> AddAccountContactAsync(Mozu.Api.Contracts.Customer.CustomerContact contact, int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.AddAccountContactClient( contact,  accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account whose contact information is being updated.</param>
		/// <param name="contactId">Unique identifer of the customer account contact being updated.</param>
		/// <param name="responseFields"></param>
		/// <param name="contact">All properties the updated contact will have. Required properties: Name and email address.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = await customercontact.UpdateAccountContactAsync( contact,  accountId,  contactId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerContact> UpdateAccountContactAsync(Mozu.Api.Contracts.Customer.CustomerContact contact, int accountId, int contactId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.UpdateAccountContactClient( contact,  accountId,  contactId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="responseFields"></param>
		/// <param name="contactList"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContactCollection = await customercontact.AddAccountContactListAsync( contactList,  accountId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.CustomerContactCollection> AddAccountContactListAsync(List<Mozu.Api.Contracts.Customer.CustomerContact> contactList, int accountId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerContactCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.AddAccountContactListClient( contactList,  accountId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account.</param>
		/// <param name="contactId">Unique identifier of the customer account contact to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   await customercontact.DeleteAccountContactAsync( accountId,  contactId);
		/// </code>
		/// </example>
		public virtual async Task DeleteAccountContactAsync(int accountId, int contactId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.DeleteAccountContactClient( accountId,  contactId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


