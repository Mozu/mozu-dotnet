
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// Use the Customer Credits resource to manage the store credit associated with a customer account. Store credit can represent a static amount the customer can redeem at any of the tenant's sites, or a gift card registered for a customer account. At this time, gift card functionality is reserved for future use.
	/// </summary>
	public partial class CreditResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public CreditResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public CreditResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new CreditResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter">A set of filter expressions representing the search parameters for a query. This parameter is optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for a list of supported filters.</param>
		/// <param name="pageSize">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with this parameter set to 25, to get the 51st through the 75th items, set startIndex to 50.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="sortBy">The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional. Refer to [Sorting and Filtering](../../../../Developer/api-guides/sorting-filtering.htm) for more information.</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with pageSize set to 25, to get the 51st through the 75th items, set this parameter to 50.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.Credit.CreditCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   var creditCollection = await credit.GetCreditsAsync( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.Credit.CreditCollection> GetCreditsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.Credit.CreditCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.GetCreditsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.Credit.Credit"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   var credit = await credit.GetCreditAsync( code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.Credit.Credit> GetCreditAsync(string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.Credit.Credit> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.GetCreditClient( code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="userId"></param>
		/// <param name="credit">Properties of the store credit of gift card applied to a customer account. At this time, gift card functionality is reserved for future use.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.Credit.Credit"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   var credit = await credit.AddCreditAsync( credit,  userId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.Credit.Credit> AddCreditAsync(Mozu.Api.Contracts.Customer.Credit.Credit credit, string userId =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.Credit.Credit> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.AddCreditClient( credit,  userId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.Credit.Credit"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   var credit = await credit.AssociateCreditToShopperAsync( code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.Credit.Credit> AssociateCreditToShopperAsync(string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.Credit.Credit> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.AssociateCreditToShopperClient( code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <param name="userId"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   await credit.ResendCreditCreatedEmailAsync( code,  userId);
		/// </code>
		/// </example>
		public virtual async Task ResendCreditCreatedEmailAsync(string code, string userId =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.ResendCreditCreatedEmailClient( code,  userId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <param name="credit">Properties of the store credit of gift card applied to a customer account. At this time, gift card functionality is reserved for future use.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.Credit.Credit"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   var credit = await credit.UpdateCreditAsync( credit,  code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Customer.Credit.Credit> UpdateCreditAsync(Mozu.Api.Contracts.Customer.Credit.Credit credit, string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Customer.Credit.Credit> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.UpdateCreditClient( credit,  code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var credit = new Credit();
		///   await credit.DeleteCreditAsync( code);
		/// </code>
		/// </example>
		public virtual async Task DeleteCreditAsync(string code, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CreditClient.DeleteCreditClient( code);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


