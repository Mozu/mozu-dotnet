
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Carts
{
	/// <summary>
	/// Use the Cart Messages resource to retrieve messages for live carts that the system logs when a product's price or inventory level changes.
	/// </summary>
	public partial class ChangeMessageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public ChangeMessageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public ChangeMessageResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new ChangeMessageResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Filtering syntax appended to an API call to increase or decrease the amount of data returned inside a JSON object. This parameter should only be used to retrieve data. Attempting to update data using this parameter may cause data loss.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Carts.CartChangeMessageCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var changemessage = new ChangeMessage();
		///   var cartChangeMessageCollection = await changemessage.GetMessagesAsync( responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Carts.CartChangeMessageCollection> GetMessagesAsync(string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Carts.CartChangeMessageCollection> response;
			var client = Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.GetMessagesClient( responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var changemessage = new ChangeMessage();
		///   await changemessage.RemoveAllMessagesAsync();
		/// </code>
		/// </example>
		public virtual async Task RemoveAllMessagesAsync(CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.RemoveAllMessagesClient();
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="messageId">Identifier of the message to remove from the cart.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var changemessage = new ChangeMessage();
		///   await changemessage.RemoveMessageAsync( messageId);
		/// </code>
		/// </example>
		public virtual async Task RemoveMessageAsync(string messageId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.RemoveMessageClient( messageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


