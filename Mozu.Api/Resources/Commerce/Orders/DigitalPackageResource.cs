
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Orders
{
	/// <summary>
	/// A digital package is a package in a digital format.
	/// </summary>
	public partial class DigitalPackageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public DigitalPackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public DigitalPackageResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new DigitalPackageResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="digitalPackageId">This parameter supplies package ID to get fulfillment actions for the digital package.</param>
		/// <param name="orderId">This parameter provides the unique identifier of the order on which to get a list of available actions.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var string = await digitalpackage.GetAvailableDigitalPackageFulfillmentActionsAsync( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		public virtual async Task<List<string>> GetAvailableDigitalPackageFulfillmentActionsAsync(string orderId, string digitalPackageId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetAvailableDigitalPackageFulfillmentActionsClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="digitalPackageId">This parameter provides the digital package Id.</param>
		/// <param name="orderId">This parameter provides the unique identifier of the order with which to associate the digital package.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.GetDigitalPackageAsync( orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> GetDigitalPackageAsync(string orderId, string digitalPackageId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.GetDigitalPackageClient( orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="orderId">The orderID is a required paramter for the digitalpackages operation. The orderId is a unique identifier of the order with which to associate the digital package.</param>
		/// <param name="responseFields"></param>
		/// <param name="digitalPackage">The digitalPackage parameter is a required parameter for the CreateDigitalPackages operation. The digitalPackage is the digital package to create and add to the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.CreateDigitalPackageAsync( digitalPackage,  orderId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> CreateDigitalPackageAsync(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.CreateDigitalPackageClient( digitalPackage,  orderId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="digitalPackageId">This parameter specifies the digital package to update in the order.</param>
		/// <param name="orderId">This parameter provides the unique identifier of the order with which to associate the digital package.</param>
		/// <param name="responseFields"></param>
		/// <param name="digitalPackage">This parameter provides the package content to update in the order.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   var digitalPackage = await digitalpackage.UpdateDigitalPackageAsync( digitalPackage,  orderId,  digitalPackageId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> UpdateDigitalPackageAsync(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage digitalPackage, string orderId, string digitalPackageId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.DigitalPackage> response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.UpdateDigitalPackageClient( digitalPackage,  orderId,  digitalPackageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="digitalPackageId">The digitalPackage ID is unique package ID to update on the order.</param>
		/// <param name="orderId">The orderId is unique identifier of the order with which to associate the package.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var digitalpackage = new DigitalPackage();
		///   await digitalpackage.DeleteDigitalPackageAsync( orderId,  digitalPackageId);
		/// </code>
		/// </example>
		public virtual async Task DeleteDigitalPackageAsync(string orderId, string digitalPackageId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Orders.DigitalPackageClient.DeleteDigitalPackageClient( orderId,  digitalPackageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


