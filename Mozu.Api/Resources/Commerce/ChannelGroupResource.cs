
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce
{
	/// <summary>
	/// Use the Channel Groups resource to manage groups of channels with common information.
	/// </summary>
	public partial class ChannelGroupResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public ChannelGroupResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public ChannelGroupResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new ChannelGroupResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroupCollection = await channelgroup.GetChannelGroupsAsync( startIndex,  pageSize,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection> GetChannelGroupsAsync(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupsClient( startIndex,  pageSize,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">The code that uniquely identifies the channel group.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = await channelgroup.GetChannelGroupAsync( code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> GetChannelGroupAsync(string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupClient( code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields"></param>
		/// <param name="channelGroup">Properties of the channel group to create.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = await channelgroup.CreateChannelGroupAsync( channelGroup,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> CreateChannelGroupAsync(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup channelGroup, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.CreateChannelGroupClient( channelGroup,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">Code that identifies the channel group.</param>
		/// <param name="responseFields"></param>
		/// <param name="channelGroup">Properties of the channel group to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = await channelgroup.UpdateChannelGroupAsync( channelGroup,  code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> UpdateChannelGroupAsync(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup channelGroup, string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.UpdateChannelGroupClient( channelGroup,  code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code">User-defined code that uniqely identifies the channel group.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   await channelgroup.DeleteChannelGroupAsync( code);
		/// </code>
		/// </example>
		public virtual async Task DeleteChannelGroupAsync(string code, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.DeleteChannelGroupClient( code);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


