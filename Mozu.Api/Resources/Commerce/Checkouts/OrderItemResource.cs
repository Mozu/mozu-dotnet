
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Commerce.Checkouts
{
	/// <summary>
	/// 
	/// </summary>
	public partial class OrderItemResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public OrderItemResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public OrderItemResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new OrderItemResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var orderItem = await orderitem.GetItemAsync( checkoutId,  itemId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem> GetItemAsync(string checkoutId, string itemId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.GetItemClient( checkoutId,  itemId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="lineId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var orderItem = await orderitem.GetItemViaLineIdAsync( checkoutId,  lineId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem> GetItemViaLineIdAsync(string checkoutId, int lineId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.GetItemViaLineIdClient( checkoutId,  lineId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var orderItemCollection = await orderitem.GetItemsAsync( checkoutId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection> GetItemsAsync(string checkoutId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.GetItemsClient( checkoutId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="destinationId"></param>
		/// <param name="itemId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.UpdateItemDestinationAsync( checkoutId,  itemId,  destinationId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> UpdateItemDestinationAsync(string checkoutId, string itemId, string destinationId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.UpdateItemDestinationClient( checkoutId,  itemId,  destinationId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <param name="quantity"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.SplitItemAsync( checkoutId,  itemId,  quantity,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> SplitItemAsync(string checkoutId, string itemId, int? quantity =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.SplitItemClient( checkoutId,  itemId,  quantity,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="responseFields"></param>
		/// <param name="itemsForDestination"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.BulkUpdateItemDestinationsAsync( itemsForDestination,  checkoutId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> BulkUpdateItemDestinationsAsync(List<Mozu.Api.Contracts.CommerceRuntime.Checkouts.ItemsForDestination> itemsForDestination, string checkoutId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.BulkUpdateItemDestinationsClient( itemsForDestination,  checkoutId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="responseFields"></param>
		/// <param name="skipInventoryCheck"></param>
		/// <param name="item"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.CreateItemAsync( item,  checkoutId,  skipInventoryCheck,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> CreateItemAsync(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem item, string checkoutId, bool? skipInventoryCheck =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.CreateItemClient( item,  checkoutId,  skipInventoryCheck,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="dutyAmount"></param>
		/// <param name="itemId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.UpdateItemDutyAsync( checkoutId,  itemId,  dutyAmount,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> UpdateItemDutyAsync(string checkoutId, string itemId, decimal dutyAmount, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.UpdateItemDutyClient( checkoutId,  itemId,  dutyAmount,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <param name="responseFields"></param>
		/// <param name="item"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.UpdateItemFulfillmentAsync( item,  checkoutId,  itemId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> UpdateItemFulfillmentAsync(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem item, string checkoutId, string itemId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.UpdateItemFulfillmentClient( item,  checkoutId,  itemId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <param name="price"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.UpdateItemProductPriceAsync( checkoutId,  itemId,  price,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> UpdateItemProductPriceAsync(string checkoutId, string itemId, decimal price, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.UpdateItemProductPriceClient( checkoutId,  itemId,  price,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <param name="quantity"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.UpdateQuantityAsync( checkoutId,  itemId,  quantity,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> UpdateQuantityAsync(string checkoutId, string itemId, int quantity, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.UpdateQuantityClient( checkoutId,  itemId,  quantity,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="checkoutId"></param>
		/// <param name="itemId"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var orderitem = new OrderItem();
		///   var checkout = await orderitem.DeleteItemAsync( checkoutId,  itemId);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> DeleteItemAsync(string checkoutId, string itemId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Checkouts.Checkout> response;
			var client = Mozu.Api.Clients.Commerce.Checkouts.OrderItemClient.DeleteItemClient( checkoutId,  itemId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


