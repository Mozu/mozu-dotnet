
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Content.Documentlists
{
	/// <summary>
	/// Use this subresource to manage documents in a document list.
	/// </summary>
	public partial class DocumentResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		private readonly DataViewMode _dataViewMode;
		
		public DocumentResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
			_dataViewMode = DataViewMode.Live;
		}

		public DocumentResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new DocumentResource(_apiContext.CloneWith(contextModification), _dataViewMode);
		}

		public DocumentResource(IApiContext apiContext, DataViewMode dataViewMode) 
		{
			_apiContext = apiContext;
			_dataViewMode = dataViewMode;
		}
				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var stream = await document.GetDocumentContentAsync(_dataViewMode,  documentListName,  documentId);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> GetDocumentContentAsync(string documentListName, string documentId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentContentClient(_dataViewMode,  documentListName,  documentId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="crop"></param>
		/// <param name="documentId"></param>
		/// <param name="documentListName"></param>
		/// <param name="height"></param>
		/// <param name="max"></param>
		/// <param name="maxHeight"></param>
		/// <param name="maxWidth"></param>
		/// <param name="quality"></param>
		/// <param name="width"></param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var stream = await document.TransformDocumentContentAsync( documentListName,  documentId,  width,  height,  max,  maxWidth,  maxHeight,  crop,  quality);
		/// </code>
		/// </example>
		public virtual async Task<System.IO.Stream> TransformDocumentContentAsync(string documentListName, string documentId, int? width =  null, int? height =  null, int? max =  null, int? maxWidth =  null, int? maxHeight =  null, string crop =  null, int? quality =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.TransformDocumentContentClient( documentListName,  documentId,  width,  height,  max,  maxWidth,  maxHeight,  crop,  quality);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Identifier of the document being retrieved.</param>
		/// <param name="documentListName">The name of the document list associated with the document to retrieve.</param>
		/// <param name="includeInactive"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = await document.GetDocumentAsync(_dataViewMode,  documentListName,  documentId,  includeInactive,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.Document> GetDocumentAsync(string documentListName, string documentId, bool? includeInactive =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentClient(_dataViewMode,  documentListName,  documentId,  includeInactive,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName">The name of the document list.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter a document's search results by any of its properties, including its name or folder path. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=Name+sw+Events"</param>
		/// <param name="includeInactive"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var documentCollection = await document.GetDocumentsAsync(_dataViewMode,  documentListName,  filter,  sortBy,  pageSize,  startIndex,  includeInactive,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentCollection> GetDocumentsAsync(string documentListName, string filter =  null, string sortBy =  null, int? pageSize =  null, int? startIndex =  null, bool? includeInactive =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentCollection> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentsClient(_dataViewMode,  documentListName,  filter,  sortBy,  pageSize,  startIndex,  includeInactive,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName">The descriptive alphanumeric document list name being created.</param>
		/// <param name="responseFields"></param>
		/// <param name="document">The descriptive name of the newly created document.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = await document.CreateDocumentAsync(_dataViewMode,  document,  documentListName,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.Document> CreateDocumentAsync(Mozu.Api.Contracts.Content.Document document, string documentListName, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.CreateDocumentClient(_dataViewMode,  document,  documentListName,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="stream">Input output stream that delivers information.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   await document.UpdateDocumentContentAsync( stream,  documentListName,  documentId,  contentType);
		/// </code>
		/// </example>
		public virtual async Task UpdateDocumentContentAsync(System.IO.Stream stream, string documentListName, string documentId, String  contentType= null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentContentClient( stream,  documentListName,  documentId,  contentType);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Unique identifier of the document to update.</param>
		/// <param name="documentListName">Name of the document list associated with the document.</param>
		/// <param name="responseFields"></param>
		/// <param name="document">Properties of the document to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = await document.UpdateDocumentAsync( document,  documentListName,  documentId,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.Document> UpdateDocumentAsync(Mozu.Api.Contracts.Content.Document document, string documentListName, string documentId, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentClient( document,  documentListName,  documentId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Identifier of the document being deleted.</param>
		/// <param name="documentListName">The name of the document list associated with the document list being deleted.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   await document.DeleteDocumentAsync( documentListName,  documentId);
		/// </code>
		/// </example>
		public virtual async Task DeleteDocumentAsync(string documentListName, string documentId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentClient( documentListName,  documentId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   await document.DeleteDocumentContentAsync( documentListName,  documentId);
		/// </code>
		/// </example>
		public virtual async Task DeleteDocumentContentAsync(string documentListName, string documentId, CancellationToken ct = default(CancellationToken))
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentContentClient( documentListName,  documentId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);

		}


	}

}


