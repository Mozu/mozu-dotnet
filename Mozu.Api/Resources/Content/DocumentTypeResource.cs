
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Content
{
	/// <summary>
	/// Use the Document Types resource to view the document types supplied by the Content API.
	/// </summary>
	public partial class DocumentTypeResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		private readonly DataViewMode _dataViewMode;
		
		public DocumentTypeResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
			_dataViewMode = DataViewMode.Live;
		}

		public DocumentTypeResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new DocumentTypeResource(_apiContext.CloneWith(contextModification), _dataViewMode);
		}

		public DocumentTypeResource(IApiContext apiContext, DataViewMode dataViewMode) 
		{
			_apiContext = apiContext;
			_dataViewMode = dataViewMode;
		}
				

		/// <summary>
		/// Retrieves a paged list of the system-defined document types.
		/// </summary>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentTypeCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttype = new DocumentType();
		///   var documentTypeCollection = await documenttype.GetDocumentTypesAsync(_dataViewMode,  pageSize,  startIndex,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentTypeCollection> GetDocumentTypesAsync(int? pageSize =  null, int? startIndex =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentTypeCollection> response;
			var client = Mozu.Api.Clients.Content.DocumentTypeClient.GetDocumentTypesClient(_dataViewMode,  pageSize,  startIndex,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// Retrieves a system-defined document type.
		/// </summary>
		/// <param name="documentTypeName">The name of the document type to retrieve.</param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttype = new DocumentType();
		///   var documentType = await documenttype.GetDocumentTypeAsync(_dataViewMode,  documentTypeName,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentType> GetDocumentTypeAsync(string documentTypeName, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentType> response;
			var client = Mozu.Api.Clients.Content.DocumentTypeClient.GetDocumentTypeClient(_dataViewMode,  documentTypeName,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="documentType"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttype = new DocumentType();
		///   var documentType = await documenttype.CreateDocumentTypeAsync(_dataViewMode,  documentType,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentType> CreateDocumentTypeAsync(Mozu.Api.Contracts.Content.DocumentType documentType, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentType> response;
			var client = Mozu.Api.Clients.Content.DocumentTypeClient.CreateDocumentTypeClient(_dataViewMode,  documentType,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentTypeName"></param>
		/// <param name="responseFields">Use this field to include those fields which are not included by default.</param>
		/// <param name="documentType"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttype = new DocumentType();
		///   var documentType = await documenttype.UpdateDocumentTypeAsync( documentType,  documentTypeName,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentType> UpdateDocumentTypeAsync(Mozu.Api.Contracts.Content.DocumentType documentType, string documentTypeName, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentType> response;
			var client = Mozu.Api.Clients.Content.DocumentTypeClient.UpdateDocumentTypeClient( documentType,  documentTypeName,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


