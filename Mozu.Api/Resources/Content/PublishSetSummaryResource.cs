
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace Mozu.Api.Resources.Content
{
	/// <summary>
	/// Use the Content Publish Set resource to manage content publish sets and the pending content drafts.You can use content publish sets to group pending content changes together and publish them all at the same time.
	/// </summary>
	public partial class PublishSetSummaryResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public PublishSetSummaryResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		public PublishSetSummaryResource CloneWithApiContext(Action<IApiContext> contextModification) 
		{
			return new PublishSetSummaryResource(_apiContext.CloneWith(contextModification));
		}

				

		/// <summary>
		/// 
		/// </summary>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.PublishSetSummaryPagedCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var publishsetsummary = new PublishSetSummary();
		///   var publishSetSummaryPagedCollection = await publishsetsummary.GetPublishSetsAsync( pageSize,  startIndex,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.PublishSetSummaryPagedCollection> GetPublishSetsAsync(int? pageSize =  null, int? startIndex =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.PublishSetSummaryPagedCollection> response;
			var client = Mozu.Api.Clients.Content.PublishSetSummaryClient.GetPublishSetsClient( pageSize,  startIndex,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="responseFields"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var publishsetsummary = new PublishSetSummary();
		///   var documentDraftSummaryPagedCollection = await publishsetsummary.GetPublishSetItemsAsync( code,  pageSize,  startIndex,  sortBy,  filter,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection> GetPublishSetItemsAsync(string code, int? pageSize =  null, int? startIndex =  null, string sortBy =  null, string filter =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection> response;
			var client = Mozu.Api.Clients.Content.PublishSetSummaryClient.GetPublishSetItemsClient( code,  pageSize,  startIndex,  sortBy,  filter,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="responseFields"></param>
		/// <param name="shouldDiscard"></param>
		/// <returns>
		/// object
		/// </returns>
		/// <example>
		/// <code>
		///   var publishsetsummary = new PublishSetSummary();
		///   var object = await publishsetsummary.DeletePublishSetAsync( code,  shouldDiscard,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<object> DeletePublishSetAsync(string code, bool? shouldDiscard =  null, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<object> response;
			var client = Mozu.Api.Clients.Content.PublishSetSummaryClient.DeletePublishSetClient( code,  shouldDiscard,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


		/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="responseFields"></param>
		/// <param name="itemsToPublish"></param>
		/// <returns>
		/// object
		/// </returns>
		/// <example>
		/// <code>
		///   var publishsetsummary = new PublishSetSummary();
		///   var object = await publishsetsummary.AddPublishSetItemsAsync( itemsToPublish,  code,  responseFields);
		/// </code>
		/// </example>
		public virtual async Task<object> AddPublishSetItemsAsync(List<Mozu.Api.Contracts.Content.AddOrDeletePublishItem> itemsToPublish, string code, string responseFields =  null, CancellationToken ct = default(CancellationToken))
		{
			MozuClient<object> response;
			var client = Mozu.Api.Clients.Content.PublishSetSummaryClient.AddPublishSetItemsClient( itemsToPublish,  code,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync(ct).ConfigureAwait(false);
			return await response.ResultAsync();

		}


	}

}


